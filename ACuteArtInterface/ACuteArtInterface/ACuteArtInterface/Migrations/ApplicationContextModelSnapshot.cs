// <auto-generated />
using System;
using ACuteArtInterface.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ACuteArtInterface.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ACuteArtInterface.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ArtistModel", b =>
                {
                    b.Property<long>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accartist_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("accartist_creation")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("accartist_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnName("accartist_fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .HasColumnName("accartist_guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnName("accartist_icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("accartist_img_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("accartist_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnName("accartist_order")
                        .HasColumnType("int");

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("accartist_thumb_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                       .HasColumnName("accartist_active")
                       .HasColumnType("bit");

                    b.HasKey("ArtistId");

                    b.ToTable("ACCArtist");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.AssetModel", b =>
            {
                b.Property<long>("AssetId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("acccopy_id")
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("AssetKey")
                    .HasColumnName("acccopy_key")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("AssetValue")
                    .HasColumnName("acccopy_value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("AssetId");

                b.ToTable("ACCCopy");
            });

            modelBuilder.Entity("ACuteArtInterface.Models.ArtworkModel", b =>
                {
                    b.Property<long>("ArtworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accartwork_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApSize")
                        .HasColumnName("accartwork_ap_size")
                        .HasColumnType("int");

                    b.Property<long>("ArtistId")
                        .HasColumnName("accartwork_artist")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .HasColumnName("accartwork_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnName("accartwork_creation")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("accartwork_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionSize")
                        .HasColumnName("accartwork_edition_size")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .HasColumnName("accartwork_guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardwareSpecs")
                        .HasColumnName("accartwork_hardware_specs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnName("accartwork_icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("accartwork_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapIconUrl")
                        .HasColumnName("accartwork_map_icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarshalCode")
                        .HasColumnName("accartwork_marshal_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("accartwork_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectUrl")
                        .HasColumnName("accartwork_object_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefabName")
                        .HasColumnName("accartwork_prefab_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Preload")
                        .HasColumnName("accartwork_preload")
                        .HasColumnType("bit");

                    b.Property<string>("SignUrl")
                        .HasColumnName("accartwork_sign_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnName("accartwork_size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeDescription")
                        .HasColumnName("accartwork_size_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceMeta")
                        .HasColumnName("accartwork_source_meta")
                        .HasColumnType("text")
                        .HasMaxLength(256);

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("accartwork_thumb_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeUrl")
                        .HasColumnName("accartwork_trade_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnName("accartwork_type")
                        .HasColumnType("int");

                    b.Property<string>("WebCarrosel")
                        .HasColumnName("accartwork_web_carrosel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebDescription")
                        .HasColumnName("accartwork_web_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebIntroPicture")
                        .HasColumnName("accartwork_web_intro_picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPicture")
                        .HasColumnName("accartwork_web_picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WpId")
                        .HasColumnName("accartwork_wp_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnName("accartwork_year")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                       .HasColumnName("accartwork_active")
                       .HasColumnType("bit");

                    b.HasKey("ArtworkId");

                    b.HasIndex("ArtistId");

                    b.ToTable("ACCArtwork");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ExhibitionArtworkModel", b =>
                {
                    b.Property<long>("ArtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accexhibition_art_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("accexhibition_art_active")
                        .HasColumnType("bit");

                    b.Property<long>("ArtworkId")
                        .HasColumnName("accexhibition_art_artwork_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ExhibitionId")
                        .HasColumnName("accexhibition_art_exhibition_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnName("accexhibition_art_order")
                        .HasColumnType("int");

                    b.HasKey("ArtId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("ACCExhibitionArtwork");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ExhibitionModel", b =>
                {
                    b.Property<long>("ExhibitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accexhibition_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("accexhibition_active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnName("accexhibition_created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("accexhibition_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("accexhibition_enddate")
                        .HasColumnType("datetime");

                    b.Property<bool>("GeoFenced")
                        .HasColumnName("accexhibition_geofenced")
                        .HasColumnType("bit");

                    b.Property<string>("Guid")
                        .HasColumnName("accexhibition_guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Howto")
                        .HasColumnName("accexhibition_howto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnName("accexhibition_icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroUrl")
                        .HasColumnName("accexhibition_intro_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnName("accexhibition_latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnName("accexhibition_longitude")
                        .HasColumnType("float");

                    b.Property<string>("MainMapUrl")
                        .HasColumnName("accexhibition_main_map_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .HasColumnName("accexhibition_map_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaData")
                        .HasColumnName("accexhibition_metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnName("accexhibition_order")
                        .HasColumnType("int");

                    b.Property<long>("OwnerId")
                        .HasColumnName("accexhibition_owner")
                        .HasColumnType("bigint");

                    b.Property<double>("Radius")
                        .HasColumnName("accexhibition_radius")
                        .HasColumnType("float");

                    b.Property<double>("ScanRadius")
                        .HasColumnName("accexhibition_scan_radius")
                        .HasColumnType("float");

                    b.Property<double>("ShowRadius")
                        .HasColumnName("accexhibition_show_radius")
                        .HasColumnType("float");

                    b.Property<string>("SponsorImages")
                        .HasColumnName("accexhibition_sponsor_images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsorName")
                        .HasColumnName("accexhibition_sponsor_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("accexhibition_startdate")
                        .HasColumnType("datetime");

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("accexhibition_thumb_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnName("accexhibition_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseGps")
                        .HasColumnName("accexhibition_use_gps")
                        .HasColumnType("bit");

                    b.Property<double>("ViewRadius")
                        .HasColumnName("accexhibition_view_radius")
                        .HasColumnType("float");

                    b.Property<bool>("Active")
                       .HasColumnName("accexhibition_active")
                       .HasColumnType("bit");


                    b.HasKey("ExhibitionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ACCExhibition");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ExhibitionRoomModel", b =>
                {
                    b.Property<long>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accexhibition_room_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("accexhibition_room_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExhibitionId")
                        .HasColumnName("accexhibition_room_exhibition")
                        .HasColumnType("bigint");

                    b.Property<string>("IconUrl")
                        .HasColumnName("accexhibition_room_icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapIconUrl")
                        .HasColumnName("accexhibition_room_map_icon_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .HasColumnName("accexhibition_room_map_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnName("accexhibition_room_order")
                        .HasColumnType("int");

                    b.Property<double>("ScanRadius")
                        .HasColumnName("accexhibition_room_scan_radius")
                        .HasColumnType("float");

                    b.Property<bool>("ShowOnMap")
                        .HasColumnName("accexhibition_room_show_on_map")
                        .HasColumnType("bit");

                    b.Property<string>("ThumbUrl")
                        .HasColumnName("accexhibition_room_thumb_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnName("accexhibition_room_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Va")
                        .HasColumnName("accexhibition_room_va")
                        .HasColumnType("bigint");

                    b.Property<string>("VaGuid")
                        .HasColumnName("accexhibition_room_va_guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                       .HasColumnName("accexhibition_room_active")
                       .HasColumnType("bit");

                    b.HasKey("RoomId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("ACCExhibitionRoom");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.UserModel", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accuser_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked")
                        .HasColumnName("accuser_blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("accuser_creationtime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceId")
                        .HasColumnName("accuser_device_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("accuser_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .HasColumnName("accuser_guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("accuser_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("accuser_lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("accuser_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnName("accuser_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileCrop")
                        .HasColumnName("accuser_profile_crop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PushId")
                        .HasColumnName("accuser_push_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnName("accuser_role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueIdentifier")
                        .HasColumnName("accuser_unique_identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WpId")
                        .HasColumnName("accuser_wpid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("ACCUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ce37c153-c744-4505-9616-98c4847a7efe",
                            ConcurrencyStamp = "fc1772c4-b460-4e5e-a2b5-4359f706c2a3",
                            Name = "StandartUser",
                            NormalizedName = "STANDARTUSER"
                        },
                        new
                        {
                            Id = "227d76b7-a62c-4285-9c56-ab6fb2aa71ad",
                            ConcurrencyStamp = "23b65d52-9a83-444b-b73d-f31bbb4995ca",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ArtworkModel", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.ArtistModel", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ExhibitionArtworkModel", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.ArtworkModel", "Artwork")
                        .WithMany()
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACuteArtInterface.Models.ExhibitionModel", "Exhibition")
                        .WithMany("Artworks")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ExhibitionModel", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.UserModel", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ACuteArtInterface.Models.ExhibitionRoomModel", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.ExhibitionModel", "Exhibition")
                        .WithMany()
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACuteArtInterface.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ACuteArtInterface.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
